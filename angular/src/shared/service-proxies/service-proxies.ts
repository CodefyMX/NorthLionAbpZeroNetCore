/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.8.6231.38725 (NJsonSchema v7.7.6231.35489) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as moment from 'moment';

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processIsTenantAvailable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processIsTenantAvailable(response));
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response);
        });
    }

    protected processIsTenantAvailable(response: Response): IsTenantAvailableOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRegister(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRegister(response));
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response);
        });
    }

    protected processRegister(response: Response): RegisterOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getLatestAuditLogOutput(): Observable<AuditLogOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetLatestAuditLogOutput";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLatestAuditLogOutput(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLatestAuditLogOutput(response));
                } catch (e) {
                    return <Observable<AuditLogOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLatestAuditLogOutput(response: Response): AuditLogOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogOutput.fromJS(resultData200) : new AuditLogOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogTable(tenantId: number, searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<AuditLogOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogTable?";
        if (tenantId !== undefined)
        
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogTable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogTable(response));
                } catch (e) {
                    return <Observable<AuditLogOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogOutput>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogTable(response: Response): AuditLogOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogOutput.fromJS(resultData200) : new AuditLogOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogDetails(id: number): Observable<AuditLogDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogDetails?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogDetails(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogDetails(response));
                } catch (e) {
                    return <Observable<AuditLogDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogDetails(response: Response): AuditLogDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogDto.fromJS(resultData200) : new AuditLogDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogTimes(count: number, code: number, tenantId: number): Observable<AuditLogTimeOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogTimes?";
        if (count !== undefined)
        
            url_ += "Count=" + encodeURIComponent("" + count) + "&"; 
        
        if (code !== undefined)
        
            url_ += "Code=" + encodeURIComponent("" + code) + "&"; 
        
        if (tenantId !== undefined)
        
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogTimes(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogTimes(response));
                } catch (e) {
                    return <Observable<AuditLogTimeOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogTimeOutput>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogTimes(response: Response): AuditLogTimeOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogTimeOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogTimeOutput.fromJS(resultData200) : new AuditLogTimeOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLatestAuditLogOutputForTenant(tenantId: number): Observable<AuditLogOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetLatestAuditLogOutputForTenant?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLatestAuditLogOutputForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLatestAuditLogOutputForTenant(response));
                } catch (e) {
                    return <Observable<AuditLogOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLatestAuditLogOutputForTenant(response: Response): AuditLogOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogOutput.fromJS(resultData200) : new AuditLogOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogTableForTenant(searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean, tenantId: number): Observable<AuditLogOutput> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogTableForTenant?";
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&"; 
        
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogTableForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogTableForTenant(response));
                } catch (e) {
                    return <Observable<AuditLogOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogOutput>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogTableForTenant(response: Response): AuditLogOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogOutput.fromJS(resultData200) : new AuditLogOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getAuditLogDetailsForTenant(id: number, tenantId: number): Observable<AuditLogDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogDetailsForTenant?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetAuditLogDetailsForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetAuditLogDetailsForTenant(response));
                } catch (e) {
                    return <Observable<AuditLogDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuditLogDto>><any>Observable.throw(response);
        });
    }

    protected processGetAuditLogDetailsForTenant(response: Response): AuditLogDto {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuditLogDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuditLogDto.fromJS(resultData200) : new AuditLogDto();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    createLanguage(input: LanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateLanguage";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLanguagesForTable(searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<LanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguagesForTable?";
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLanguagesForTable(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguagesForTable(response));
                } catch (e) {
                    return <Observable<LanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<LanguagesOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLanguagesForTable(response: Response): LanguagesOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LanguagesOutput.fromJS(resultData200) : new LanguagesOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    allLanguages(): Observable<LanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/AllLanguages";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAllLanguages(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAllLanguages(response));
                } catch (e) {
                    return <Observable<LanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<LanguagesOutput>><any>Observable.throw(response);
        });
    }

    protected processAllLanguages(response: Response): LanguagesOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LanguagesOutput.fromJS(resultData200) : new LanguagesOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLocalizationTexts(source: string, sourceLang: string, targetLang: string, searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<LocalizationTextsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLocalizationTexts?";
        if (source !== undefined)
        
            url_ += "Source=" + encodeURIComponent("" + source) + "&"; 
        
        if (sourceLang !== undefined)
        
            url_ += "SourceLang=" + encodeURIComponent("" + sourceLang) + "&"; 
        
        if (targetLang !== undefined)
        
            url_ += "TargetLang=" + encodeURIComponent("" + targetLang) + "&"; 
        
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLocalizationTexts(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLocalizationTexts(response));
                } catch (e) {
                    return <Observable<LocalizationTextsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<LocalizationTextsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetLocalizationTexts(response: Response): LocalizationTextsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LocalizationTextsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LocalizationTextsOutput.fromJS(resultData200) : new LocalizationTextsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getLanguageTextsForEditView(selectedTargetLanguage: string, selectedSourceLanguage: string): Observable<LanguageTextEditView> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTextsForEditView?";
        if (selectedTargetLanguage !== undefined)
        
            url_ += "selectedTargetLanguage=" + encodeURIComponent("" + selectedTargetLanguage) + "&"; 
        
        if (selectedSourceLanguage !== undefined)
        
            url_ += "selectedSourceLanguage=" + encodeURIComponent("" + selectedSourceLanguage) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetLanguageTextsForEditView(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetLanguageTextsForEditView(response));
                } catch (e) {
                    return <Observable<LanguageTextEditView>><any>Observable.throw(e);
                }
            } else
                return <Observable<LanguageTextEditView>><any>Observable.throw(response);
        });
    }

    protected processGetLanguageTextsForEditView(response: Response): LanguageTextEditView {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: LanguageTextEditView = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? LanguageTextEditView.fromJS(resultData200) : new LanguageTextEditView();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteLanguage(code: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (code !== undefined)
        
            url_ += "code=" + encodeURIComponent("" + code) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteLanguage(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteLanguage(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteLanguage(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    editLocalizationText(input: LanguageTextEditInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/EditLocalizationText";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEditLocalizationText(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEditLocalizationText(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processEditLocalizationText(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateLanguageFromXml(languageName: string, source: string, updateExistingValues: boolean): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageFromXml?";
        if (languageName !== undefined)
        
            url_ += "languageName=" + encodeURIComponent("" + languageName) + "&"; 
        
        if (source !== undefined)
        
            url_ += "source=" + encodeURIComponent("" + source) + "&"; 
        
        if (updateExistingValues !== undefined)
        
            url_ += "updateExistingValues=" + encodeURIComponent("" + updateExistingValues) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateLanguageFromXml(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateLanguageFromXml(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateLanguageFromXml(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class OrganizationUnitsServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    createOrganizationUnit(input: OrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/CreateOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/UpdateOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/MoveOrganizationUnit";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processMoveOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processMoveOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processMoveOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    addUserToOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/AddUserToOrganizationUnit?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (organizationUnitId !== undefined)
        
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAddUserToOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAddUserToOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processAddUserToOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getOrganizationUnitsTree(): Observable<OrganizationUnitsTreeModel> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/GetOrganizationUnitsTree";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetOrganizationUnitsTree(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnitsTree(response));
                } catch (e) {
                    return <Observable<OrganizationUnitsTreeModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitsTreeModel>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnitsTree(response: Response): OrganizationUnitsTreeModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: OrganizationUnitsTreeModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitsTreeModel.fromJS(resultData200) : new OrganizationUnitsTreeModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getOrganizationUnitForEdit(id: number): Observable<UpdateOrganizationUnitInput> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/GetOrganizationUnitForEdit?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetOrganizationUnitForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetOrganizationUnitForEdit(response));
                } catch (e) {
                    return <Observable<UpdateOrganizationUnitInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateOrganizationUnitInput>><any>Observable.throw(response);
        });
    }

    protected processGetOrganizationUnitForEdit(response: Response): UpdateOrganizationUnitInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UpdateOrganizationUnitInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateOrganizationUnitInput.fromJS(resultData200) : new UpdateOrganizationUnitInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/DeleteOrganizationUnit?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnits/DeleteUserFromOrganizationUnit?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (organizationUnitId !== undefined)
        
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteUserFromOrganizationUnit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteUserFromOrganizationUnit(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteUserFromOrganizationUnit(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    updateRolePermissions(input: UpdateRolePermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/UpdateRolePermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateRolePermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateRolePermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateRolePermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoleForEdit(id: number): Observable<UpdateRoleInput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoleForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoleForEdit(response));
                } catch (e) {
                    return <Observable<UpdateRoleInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateRoleInput>><any>Observable.throw(response);
        });
    }

    protected processGetRoleForEdit(response: Response): UpdateRoleInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UpdateRoleInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateRoleInput.fromJS(resultData200) : new UpdateRoleInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createRole(input: CreateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateRole";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateRole(input: UpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/UpdateRole";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteRole(roleId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (roleId !== undefined)
        
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoles(searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<RolesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoles(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoles(response));
                } catch (e) {
                    return <Observable<RolesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RolesOutput>><any>Observable.throw(response);
        });
    }

    protected processGetRoles(response: Response): RolesOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: RolesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RolesOutput.fromJS(resultData200) : new RolesOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoleCreateModel(): Observable<CreateRoleInput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleCreateModel";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoleCreateModel(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoleCreateModel(response));
                } catch (e) {
                    return <Observable<CreateRoleInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<CreateRoleInput>><any>Observable.throw(response);
        });
    }

    protected processGetRoleCreateModel(response: Response): CreateRoleInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CreateRoleInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CreateRoleInput.fromJS(resultData200) : new CreateRoleInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetCurrentLoginInformations(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetCurrentLoginInformations(response));
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): GetCurrentLoginInformationsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getEditionsForTenant(tenantId: number): Observable<EditionsForTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetEditionsForTenant?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetEditionsForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetEditionsForTenant(response));
                } catch (e) {
                    return <Observable<EditionsForTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionsForTenantOutput>><any>Observable.throw(response);
        });
    }

    protected processGetEditionsForTenant(response: Response): EditionsForTenantOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: EditionsForTenantOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsForTenantOutput.fromJS(resultData200) : new EditionsForTenantOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setFeatureValuesForTenant(input: SetTenantValuesForTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/SetFeatureValuesForTenant";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetFeatureValuesForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetFeatureValuesForTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetFeatureValuesForTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setTenantEdition(input: SetTenantEditionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/SetTenantEdition";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetTenantEdition(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetTenantEdition(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetTenantEdition(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getFeaturesForTenant(tenantId: number): Observable<FeaturesForTenant> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetFeaturesForTenant?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetFeaturesForTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetFeaturesForTenant(response));
                } catch (e) {
                    return <Observable<FeaturesForTenant>><any>Observable.throw(e);
                }
            } else
                return <Observable<FeaturesForTenant>><any>Observable.throw(response);
        });
    }

    protected processGetFeaturesForTenant(response: Response): FeaturesForTenant {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: FeaturesForTenant = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FeaturesForTenant.fromJS(resultData200) : new FeaturesForTenant();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetFeatures(tenantId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetFeatures?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetFeatures(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetFeatures(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetFeatures(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTenants(searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<TenantsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenants(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenants(response));
                } catch (e) {
                    return <Observable<TenantsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetTenants(response: Response): TenantsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: TenantsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantsOutput.fromJS(resultData200) : new TenantsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getTenantForEdit(tenantId: number): Observable<EditTenantInput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetTenantForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetTenantForEdit(response));
                } catch (e) {
                    return <Observable<EditTenantInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditTenantInput>><any>Observable.throw(response);
        });
    }

    protected processGetTenantForEdit(response: Response): EditTenantInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: EditTenantInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditTenantInput.fromJS(resultData200) : new EditTenantInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteTenant(tenantId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    restoreTenant(tenantId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/RestoreTenant?";
        if (tenantId !== undefined)
        
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRestoreTenant(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRestoreTenant(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRestoreTenant(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processAuthenticate(response));
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processAuthenticate(response: Response): AuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetExternalAuthenticationProviders(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetExternalAuthenticationProviders(response));
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): ExternalLoginProviderInfoModel[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";

        const content_ = JSON.stringify(model ? model.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processExternalAuthenticate(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processExternalAuthenticate(response));
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response);
        });
    }

    protected processExternalAuthenticate(response: Response): ExternalAuthenticateResultModel {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    prohibitPermission(input: ProhibitPermissionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ProhibitPermission";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processProhibitPermission(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processProhibitPermission(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processProhibitPermission(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    removeUserFromRole(userId: number, roleName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/RemoveUserFromRole?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (roleName !== undefined)
        
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRemoveUserFromRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processRemoveUserFromRole(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processRemoveUserFromRole(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUsers(searchString: string, page: number, rowsPerPage: number, sort: string, sortDir: string, filter: string, getAll: boolean): Observable<UsersOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (searchString !== undefined)
        
            url_ += "SearchString=" + encodeURIComponent("" + searchString) + "&"; 
        
        if (page !== undefined)
        
            url_ += "Page=" + encodeURIComponent("" + page) + "&"; 
        
        if (rowsPerPage !== undefined)
        
            url_ += "RowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&"; 
        
        if (sort !== undefined)
        
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&"; 
        
        if (sortDir !== undefined)
        
            url_ += "SortDir=" + encodeURIComponent("" + sortDir) + "&"; 
        
        if (filter !== undefined)
        
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        
        if (getAll !== undefined)
        
            url_ += "GetAll=" + encodeURIComponent("" + getAll) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUsers(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsers(response));
                } catch (e) {
                    return <Observable<UsersOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UsersOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUsers(response: Response): UsersOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UsersOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UsersOutput.fromJS(resultData200) : new UsersOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    createUser(input: CreateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processCreateUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processCreateUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processCreateUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserProfile(input: EditProfileInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserProfile";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserProfile(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserProfile(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserProfile(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    editUser(input: UpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/EditUser";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEditUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processEditUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processEditUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserForEdit(userId: number): Observable<UpdateUserInput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserForEdit(response));
                } catch (e) {
                    return <Observable<UpdateUserInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateUserInput>><any>Observable.throw(response);
        });
    }

    protected processGetUserForEdit(response: Response): UpdateUserInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UpdateUserInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateUserInput.fromJS(resultData200) : new UpdateUserInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRolesForUser(userId: number): Observable<UserRoleSelectorOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRolesForUser?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRolesForUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRolesForUser(response));
                } catch (e) {
                    return <Observable<UserRoleSelectorOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UserRoleSelectorOutput>><any>Observable.throw(response);
        });
    }

    protected processGetRolesForUser(response: Response): UserRoleSelectorOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UserRoleSelectorOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserRoleSelectorOutput.fromJS(resultData200) : new UserRoleSelectorOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUsersInRole(roleName: string): Observable<UsersOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersInRole?";
        if (roleName !== undefined)
        
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUsersInRole(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUsersInRole(response));
                } catch (e) {
                    return <Observable<UsersOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UsersOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUsersInRole(response: Response): UsersOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: UsersOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UsersOutput.fromJS(resultData200) : new UsersOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setUserRoles(input: SetUserRolesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/SetUserRoles";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetUserRoles(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetUserRoles(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetUserRoles(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserProfileForEdit(): Observable<EditProfileInput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserProfileForEdit";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserProfileForEdit(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserProfileForEdit(response));
                } catch (e) {
                    return <Observable<EditProfileInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditProfileInput>><any>Observable.throw(response);
        });
    }

    protected processGetUserProfileForEdit(response: Response): EditProfileInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: EditProfileInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditProfileInput.fromJS(resultData200) : new EditProfileInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    updateUserProfilePicture(userId: number, profilePicture: string): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserProfilePicture?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        
        if (profilePicture !== undefined)
        
            url_ += "profilePicture=" + encodeURIComponent("" + profilePicture) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUpdateUserProfilePicture(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUpdateUserProfilePicture(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUpdateUserProfilePicture(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    changeUserPassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangeUserPassword";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangeUserPassword(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangeUserPassword(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangeUserPassword(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserPermissions(userId: number): Observable<CurrentUserPermissionsOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissions?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserPermissions(response));
                } catch (e) {
                    return <Observable<CurrentUserPermissionsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserPermissionsOutput>><any>Observable.throw(response);
        });
    }

    protected processGetUserPermissions(response: Response): CurrentUserPermissionsOutput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: CurrentUserPermissionsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserPermissionsOutput.fromJS(resultData200) : new CurrentUserPermissionsOutput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    resetPermissions(userId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPermissions?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResetPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processResetPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processResetPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    unlockUser(userId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUnlockUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processUnlockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processUnlockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    lockUser(userId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/LockUser?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLockUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processLockUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processLockUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    deleteUser(userId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (userId !== undefined)
        
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processDeleteUser(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processDeleteUser(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processDeleteUser(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getPermissions(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/User/GetPermissions";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetPermissions(response));
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response);
        });
    }

    protected processGetPermissions(response: Response): string[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getRoles(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetRoles(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetRoles(response));
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response);
        });
    }

    protected processGetRoles(response: Response): string[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: string[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    setUserSpecialPermissions(input: SetUserSpecialPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/SetUserSpecialPermissions";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSetUserSpecialPermissions(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processSetUserSpecialPermissions(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processSetUserSpecialPermissions(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    changePasswordFromAdmin(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangePasswordFromAdmin";

        const content_ = JSON.stringify(input ? input.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processChangePasswordFromAdmin(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processChangePasswordFromAdmin(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processChangePasswordFromAdmin(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    getUserProfile(id: number): Observable<EditProfileInput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserProfile?";
        if (id !== undefined)
        
            url_ += "id=" + encodeURIComponent("" + id) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
				"Accept": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processGetUserProfile(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processGetUserProfile(response));
                } catch (e) {
                    return <Observable<EditProfileInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditProfileInput>><any>Observable.throw(response);
        });
    }

    protected processGetUserProfile(response: Response): EditProfileInput {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: EditProfileInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditProfileInput.fromJS(resultData200) : new EditProfileInput();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class IsTenantAvailableInput { 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        return new IsTenantAvailableInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableInput(JSON.parse(json));
    }
}

export class IsTenantAvailableOutput { 
    state: IsTenantAvailableOutputState; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.state = data["state"] !== undefined ? data["state"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        return new IsTenantAvailableOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["state"] = this.state !== undefined ? this.state : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IsTenantAvailableOutput(JSON.parse(json));
    }
}

export class RegisterInput { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    password: string; 
    captchaResponse: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.captchaResponse = data["captchaResponse"] !== undefined ? data["captchaResponse"] : null;
        }
    }

    static fromJS(data: any): RegisterInput {
        return new RegisterInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterInput(JSON.parse(json));
    }
}

export class RegisterOutput { 
    canLogin: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.canLogin = data["canLogin"] !== undefined ? data["canLogin"] : null;
        }
    }

    static fromJS(data: any): RegisterOutput {
        return new RegisterOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RegisterOutput(JSON.parse(json));
    }
}

export class AuditLogOutput { 
    auditLogs: AuditLogDto[]; 
    searchString: string; 
    page: number; 
    rows: number; 
    remainingPages: number; 
    tenancyName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["auditLogs"] && data["auditLogs"].constructor === Array) {
                this.auditLogs = [];
                for (let item of data["auditLogs"])
                    this.auditLogs.push(AuditLogDto.fromJS(item));
            }
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            this.page = data["page"] !== undefined ? data["page"] : null;
            this.rows = data["rows"] !== undefined ? data["rows"] : null;
            this.remainingPages = data["remainingPages"] !== undefined ? data["remainingPages"] : null;
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
        }
    }

    static fromJS(data: any): AuditLogOutput {
        return new AuditLogOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.auditLogs && this.auditLogs.constructor === Array) {
            data["auditLogs"] = [];
            for (let item of this.auditLogs)
                data["auditLogs"].push(item.toJS());
        }
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        data["page"] = this.page !== undefined ? this.page : null;
        data["rows"] = this.rows !== undefined ? this.rows : null;
        data["remainingPages"] = this.remainingPages !== undefined ? this.remainingPages : null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogOutput(JSON.parse(json));
    }
}

export class AuditLogDto { 
    browserInfo: string; 
    clientIpAddress: string; 
    serviceName: string; 
    clientName: string; 
    exception: string; 
    executionDuration: number; 
    executionTime: moment.Moment; 
    methodName: string; 
    parameters: string; 
    userId: number; 
    userName: string; 
    executionTimeString: string; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.clientIpAddress = data["clientIpAddress"] !== undefined ? data["clientIpAddress"] : null;
            this.serviceName = data["serviceName"] !== undefined ? data["serviceName"] : null;
            this.clientName = data["clientName"] !== undefined ? data["clientName"] : null;
            this.exception = data["exception"] !== undefined ? data["exception"] : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : null;
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.parameters = data["parameters"] !== undefined ? data["parameters"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.executionTimeString = data["executionTimeString"] !== undefined ? data["executionTimeString"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogDto {
        return new AuditLogDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : null;
        data["exception"] = this.exception !== undefined ? this.exception : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["parameters"] = this.parameters !== undefined ? this.parameters : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["executionTimeString"] = this.executionTimeString !== undefined ? this.executionTimeString : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogDto(JSON.parse(json));
    }
}

export class AuditLogTimeOutput { 
    avgExecutionTime: string; 
    totalRequestsReceived: number; 
    auditLogTimeOutputDtos: AuditLogTimeOutputDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.avgExecutionTime = data["avgExecutionTime"] !== undefined ? data["avgExecutionTime"] : null;
            this.totalRequestsReceived = data["totalRequestsReceived"] !== undefined ? data["totalRequestsReceived"] : null;
            if (data["auditLogTimeOutputDtos"] && data["auditLogTimeOutputDtos"].constructor === Array) {
                this.auditLogTimeOutputDtos = [];
                for (let item of data["auditLogTimeOutputDtos"])
                    this.auditLogTimeOutputDtos.push(AuditLogTimeOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AuditLogTimeOutput {
        return new AuditLogTimeOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["avgExecutionTime"] = this.avgExecutionTime !== undefined ? this.avgExecutionTime : null;
        data["totalRequestsReceived"] = this.totalRequestsReceived !== undefined ? this.totalRequestsReceived : null;
        if (this.auditLogTimeOutputDtos && this.auditLogTimeOutputDtos.constructor === Array) {
            data["auditLogTimeOutputDtos"] = [];
            for (let item of this.auditLogTimeOutputDtos)
                data["auditLogTimeOutputDtos"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogTimeOutput(JSON.parse(json));
    }
}

export class AuditLogTimeOutputDto { 
    methodName: string; 
    executionDuration: number; 
    hour: number; 
    browserInfo: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.methodName = data["methodName"] !== undefined ? data["methodName"] : null;
            this.executionDuration = data["executionDuration"] !== undefined ? data["executionDuration"] : null;
            this.hour = data["hour"] !== undefined ? data["hour"] : null;
            this.browserInfo = data["browserInfo"] !== undefined ? data["browserInfo"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): AuditLogTimeOutputDto {
        return new AuditLogTimeOutputDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["methodName"] = this.methodName !== undefined ? this.methodName : null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : null;
        data["hour"] = this.hour !== undefined ? this.hour : null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuditLogTimeOutputDto(JSON.parse(json));
    }
}

export class LanguageInput { 
    langCode: string; 
    displayName: string; 
    icon: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.langCode = data["langCode"] !== undefined ? data["langCode"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.icon = data["icon"] !== undefined ? data["icon"] : null;
        }
    }

    static fromJS(data: any): LanguageInput {
        return new LanguageInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["langCode"] = this.langCode !== undefined ? this.langCode : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["icon"] = this.icon !== undefined ? this.icon : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageInput(JSON.parse(json));
    }
}

export class LanguagesOutput { 
    searchString: string; 
    page: number; 
    rows: number; 
    remainingPages: number; 
    languages: LanguageDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            this.page = data["page"] !== undefined ? data["page"] : null;
            this.rows = data["rows"] !== undefined ? data["rows"] : null;
            this.remainingPages = data["remainingPages"] !== undefined ? data["remainingPages"] : null;
            if (data["languages"] && data["languages"].constructor === Array) {
                this.languages = [];
                for (let item of data["languages"])
                    this.languages.push(LanguageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LanguagesOutput {
        return new LanguagesOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        data["page"] = this.page !== undefined ? this.page : null;
        data["rows"] = this.rows !== undefined ? this.rows : null;
        data["remainingPages"] = this.remainingPages !== undefined ? this.remainingPages : null;
        if (this.languages && this.languages.constructor === Array) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguagesOutput(JSON.parse(json));
    }
}

export class LanguageDto { 
    name: string; 
    source: string; 
    icon: string; 
    creationTimeString: string; 
    displayName: string; 
    isStatic: boolean; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.source = data["source"] !== undefined ? data["source"] : null;
            this.icon = data["icon"] !== undefined ? data["icon"] : null;
            this.creationTimeString = data["creationTimeString"] !== undefined ? data["creationTimeString"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): LanguageDto {
        return new LanguageDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["source"] = this.source !== undefined ? this.source : null;
        data["icon"] = this.icon !== undefined ? this.icon : null;
        data["creationTimeString"] = this.creationTimeString !== undefined ? this.creationTimeString : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageDto(JSON.parse(json));
    }
}

export class LocalizationTextsOutput { 
    searchString: string; 
    page: number; 
    rows: number; 
    remainingPages: number; 
    texts: LanguageTextTableElement[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            this.page = data["page"] !== undefined ? data["page"] : null;
            this.rows = data["rows"] !== undefined ? data["rows"] : null;
            this.remainingPages = data["remainingPages"] !== undefined ? data["remainingPages"] : null;
            if (data["texts"] && data["texts"].constructor === Array) {
                this.texts = [];
                for (let item of data["texts"])
                    this.texts.push(LanguageTextTableElement.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizationTextsOutput {
        return new LocalizationTextsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        data["page"] = this.page !== undefined ? this.page : null;
        data["rows"] = this.rows !== undefined ? this.rows : null;
        data["remainingPages"] = this.remainingPages !== undefined ? this.remainingPages : null;
        if (this.texts && this.texts.constructor === Array) {
            data["texts"] = [];
            for (let item of this.texts)
                data["texts"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LocalizationTextsOutput(JSON.parse(json));
    }
}

export class LanguageTextTableElement { 
    key: string; 
    source: string; 
    sourceValue: string; 
    targetValue: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.source = data["source"] !== undefined ? data["source"] : null;
            this.sourceValue = data["sourceValue"] !== undefined ? data["sourceValue"] : null;
            this.targetValue = data["targetValue"] !== undefined ? data["targetValue"] : null;
        }
    }

    static fromJS(data: any): LanguageTextTableElement {
        return new LanguageTextTableElement(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["key"] = this.key !== undefined ? this.key : null;
        data["source"] = this.source !== undefined ? this.source : null;
        data["sourceValue"] = this.sourceValue !== undefined ? this.sourceValue : null;
        data["targetValue"] = this.targetValue !== undefined ? this.targetValue : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageTextTableElement(JSON.parse(json));
    }
}

export class LanguageTextEditView { 
    source: string[]; 
    languageName: string; 
    key: string; 
    value: string; 
    sourceLanguages: LanguageSelectedObject[]; 
    targetLanguages: LanguageSelectedObject[]; 
    selectedSourceLanguage: string; 
    selectedTargetLanguage: string;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["source"] && data["source"].constructor === Array) {
                this.source = [];
                for (let item of data["source"])
                    this.source.push(item);
            }
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
            if (data["sourceLanguages"] && data["sourceLanguages"].constructor === Array) {
                this.sourceLanguages = [];
                for (let item of data["sourceLanguages"])
                    this.sourceLanguages.push(LanguageSelectedObject.fromJS(item));
            }
            if (data["targetLanguages"] && data["targetLanguages"].constructor === Array) {
                this.targetLanguages = [];
                for (let item of data["targetLanguages"])
                    this.targetLanguages.push(LanguageSelectedObject.fromJS(item));
            }
            this.selectedSourceLanguage = data["selectedSourceLanguage"] !== undefined ? data["selectedSourceLanguage"] : null;
            this.selectedTargetLanguage = data["selectedTargetLanguage"] !== undefined ? data["selectedTargetLanguage"] : null;
        }
    }

    static fromJS(data: any): LanguageTextEditView {
        return new LanguageTextEditView(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.source && this.source.constructor === Array) {
            data["source"] = [];
            for (let item of this.source)
                data["source"].push(item);
        }
        data["languageName"] = this.languageName !== undefined ? this.languageName : null;
        data["key"] = this.key !== undefined ? this.key : null;
        data["value"] = this.value !== undefined ? this.value : null;
        if (this.sourceLanguages && this.sourceLanguages.constructor === Array) {
            data["sourceLanguages"] = [];
            for (let item of this.sourceLanguages)
                data["sourceLanguages"].push(item.toJS());
        }
        if (this.targetLanguages && this.targetLanguages.constructor === Array) {
            data["targetLanguages"] = [];
            for (let item of this.targetLanguages)
                data["targetLanguages"].push(item.toJS());
        }
        data["selectedSourceLanguage"] = this.selectedSourceLanguage !== undefined ? this.selectedSourceLanguage : null;
        data["selectedTargetLanguage"] = this.selectedTargetLanguage !== undefined ? this.selectedTargetLanguage : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageTextEditView(JSON.parse(json));
    }
}

export class LanguageSelectedObject { 
    name: string; 
    displayName: string; 
    icon: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.icon = data["icon"] !== undefined ? data["icon"] : null;
        }
    }

    static fromJS(data: any): LanguageSelectedObject {
        return new LanguageSelectedObject(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["icon"] = this.icon !== undefined ? this.icon : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageSelectedObject(JSON.parse(json));
    }
}

export class LanguageTextEditInput { 
    source: string; 
    languageName: string; 
    value: string; 
    key: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.source = data["source"] !== undefined ? data["source"] : null;
            this.languageName = data["languageName"] !== undefined ? data["languageName"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
        }
    }

    static fromJS(data: any): LanguageTextEditInput {
        return new LanguageTextEditInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["source"] = this.source !== undefined ? this.source : null;
        data["languageName"] = this.languageName !== undefined ? this.languageName : null;
        data["value"] = this.value !== undefined ? this.value : null;
        data["key"] = this.key !== undefined ? this.key : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new LanguageTextEditInput(JSON.parse(json));
    }
}

export class OrganizationUnitInput { 
    parentId: number; 
    code: string; 
    displayName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
        }
    }

    static fromJS(data: any): OrganizationUnitInput {
        return new OrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        data["code"] = this.code !== undefined ? this.code : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitInput(JSON.parse(json));
    }
}

export class UpdateOrganizationUnitInput { 
    parentId: number; 
    code: string; 
    displayName: string; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        return new UpdateOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        data["code"] = this.code !== undefined ? this.code : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateOrganizationUnitInput(JSON.parse(json));
    }
}

export class MoveOrganizationUnitInput { 
    id: number; 
    parentId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        return new MoveOrganizationUnitInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new MoveOrganizationUnitInput(JSON.parse(json));
    }
}

export class OrganizationUnitsTreeModel { 
    organizationUnits: OrganizationUnitDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["organizationUnits"] && data["organizationUnits"].constructor === Array) {
                this.organizationUnits = [];
                for (let item of data["organizationUnits"])
                    this.organizationUnits.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrganizationUnitsTreeModel {
        return new OrganizationUnitsTreeModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.organizationUnits && this.organizationUnits.constructor === Array) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits)
                data["organizationUnits"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitsTreeModel(JSON.parse(json));
    }
}

export class OrganizationUnitDto { 
    parentId: number; 
    code: string; 
    displayName: string; 
    childrenDto: OrganizationUnitDto[]; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.parentId = data["parentId"] !== undefined ? data["parentId"] : null;
            this.code = data["code"] !== undefined ? data["code"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            if (data["childrenDto"] && data["childrenDto"].constructor === Array) {
                this.childrenDto = [];
                for (let item of data["childrenDto"])
                    this.childrenDto.push(OrganizationUnitDto.fromJS(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        return new OrganizationUnitDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["parentId"] = this.parentId !== undefined ? this.parentId : null;
        data["code"] = this.code !== undefined ? this.code : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        if (this.childrenDto && this.childrenDto.constructor === Array) {
            data["childrenDto"] = [];
            for (let item of this.childrenDto)
                data["childrenDto"].push(item.toJS());
        }
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new OrganizationUnitDto(JSON.parse(json));
    }
}

export class UpdateRolePermissionsInput { 
    roleId: number; 
    grantedPermissionNames: string[] = [];
    constructor(data?: any) {
        if (data !== undefined) {
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateRolePermissionsInput {
        return new UpdateRolePermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateRolePermissionsInput(JSON.parse(json));
    }
}

export class UpdateRoleInput { 
    permissions: AssignedPermission[]; 
    displayName: string; 
    isDefault: boolean; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(AssignedPermission.fromJS(item));
            }
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateRoleInput {
        return new UpdateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateRoleInput(JSON.parse(json));
    }
}

export class AssignedPermission { 
    displayName: string; 
    name: string; 
    granted: boolean; 
    childPermissions: AssignedPermission[]; 
    parentPermission: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.granted = data["granted"] !== undefined ? data["granted"] : null;
            if (data["childPermissions"] && data["childPermissions"].constructor === Array) {
                this.childPermissions = [];
                for (let item of data["childPermissions"])
                    this.childPermissions.push(AssignedPermission.fromJS(item));
            }
            this.parentPermission = data["parentPermission"] !== undefined ? data["parentPermission"] : null;
        }
    }

    static fromJS(data: any): AssignedPermission {
        return new AssignedPermission(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["granted"] = this.granted !== undefined ? this.granted : null;
        if (this.childPermissions && this.childPermissions.constructor === Array) {
            data["childPermissions"] = [];
            for (let item of this.childPermissions)
                data["childPermissions"].push(item.toJS());
        }
        data["parentPermission"] = this.parentPermission !== undefined ? this.parentPermission : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AssignedPermission(JSON.parse(json));
    }
}

export class CreateRoleInput { 
    name: string; 
    displayName: string; 
    permissions: AssignedPermission[]; 
    isDefault: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(AssignedPermission.fromJS(item));
            }
            this.isDefault = data["isDefault"] !== undefined ? data["isDefault"] : null;
        }
    }

    static fromJS(data: any): CreateRoleInput {
        return new CreateRoleInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJS());
        }
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateRoleInput(JSON.parse(json));
    }
}

export class RolesOutput { 
    roles: RoleDto[]; 
    searchString: string; 
    page: number; 
    rows: number; 
    remainingPages: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(RoleDto.fromJS(item));
            }
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            this.page = data["page"] !== undefined ? data["page"] : null;
            this.rows = data["rows"] !== undefined ? data["rows"] : null;
            this.remainingPages = data["remainingPages"] !== undefined ? data["remainingPages"] : null;
        }
    }

    static fromJS(data: any): RolesOutput {
        return new RolesOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        data["page"] = this.page !== undefined ? this.page : null;
        data["rows"] = this.rows !== undefined ? this.rows : null;
        data["remainingPages"] = this.remainingPages !== undefined ? this.remainingPages : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RolesOutput(JSON.parse(json));
    }
}

export class RoleDto { 
    name: string; 
    displayName: string; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): RoleDto {
        return new RoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new RoleDto(JSON.parse(json));
    }
}

export class GetCurrentLoginInformationsOutput { 
    application: ApplicationInfoDto; 
    user: UserLoginInfoDto; 
    tenant: TenantLoginInfoDto;
    constructor(data?: any) {
        if (data !== undefined) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : null;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : null;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : null;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        return new GetCurrentLoginInformationsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["application"] = this.application ? this.application.toJS() : null;
        data["user"] = this.user ? this.user.toJS() : null;
        data["tenant"] = this.tenant ? this.tenant.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new GetCurrentLoginInformationsOutput(JSON.parse(json));
    }
}

export class ApplicationInfoDto { 
    version: string; 
    releaseDate: moment.Moment;
    constructor(data?: any) {
        if (data !== undefined) {
            this.version = data["version"] !== undefined ? data["version"] : null;
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : null;
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        return new ApplicationInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["version"] = this.version !== undefined ? this.version : null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ApplicationInfoDto(JSON.parse(json));
    }
}

export class UserLoginInfoDto { 
    name: string; 
    surname: string; 
    userName: string; 
    emailAddress: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        return new UserLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserLoginInfoDto(JSON.parse(json));
    }
}

export class TenantLoginInfoDto { 
    tenancyName: string; 
    name: string; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        return new TenantLoginInfoDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantLoginInfoDto(JSON.parse(json));
    }
}

export class CreateTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
        }
    }

    static fromJS(data: any): CreateTenantInput {
        return new CreateTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateTenantInput(JSON.parse(json));
    }
}

export class EditionsForTenantOutput { 
    editions: EditionDto[]; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["editions"] && data["editions"].constructor === Array) {
                this.editions = [];
                for (let item of data["editions"])
                    this.editions.push(EditionDto.fromJS(item));
            }
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): EditionsForTenantOutput {
        return new EditionsForTenantOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.editions && this.editions.constructor === Array) {
            data["editions"] = [];
            for (let item of this.editions)
                data["editions"].push(item.toJS());
        }
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionsForTenantOutput(JSON.parse(json));
    }
}

export class EditionDto { 
    isEnabledForTenant: boolean; 
    displayName: string; 
    id: number; 
    tenantId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.isEnabledForTenant = data["isEnabledForTenant"] !== undefined ? data["isEnabledForTenant"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
        }
    }

    static fromJS(data: any): EditionDto {
        return new EditionDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["isEnabledForTenant"] = this.isEnabledForTenant !== undefined ? this.isEnabledForTenant : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["id"] = this.id !== undefined ? this.id : null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditionDto(JSON.parse(json));
    }
}

export class SetTenantValuesForTenantInput { 
    tenantId: number; 
    features: FeatureInput[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FeatureInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SetTenantValuesForTenantInput {
        return new SetTenantValuesForTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetTenantValuesForTenantInput(JSON.parse(json));
    }
}

export class FeatureInput { 
    name: string; 
    defaultValue: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.defaultValue = data["defaultValue"] !== undefined ? data["defaultValue"] : null;
        }
    }

    static fromJS(data: any): FeatureInput {
        return new FeatureInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["defaultValue"] = this.defaultValue !== undefined ? this.defaultValue : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FeatureInput(JSON.parse(json));
    }
}

export class SetTenantEditionInput { 
    tenantId: number; 
    editionId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : null;
        }
    }

    static fromJS(data: any): SetTenantEditionInput {
        return new SetTenantEditionInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["editionId"] = this.editionId !== undefined ? this.editionId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetTenantEditionInput(JSON.parse(json));
    }
}

export class FeaturesForTenant { 
    tenantId: number; 
    displayName: string; 
    features: FeatureDto[]; 
    price: number; 
    name: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenantId = data["tenantId"] !== undefined ? data["tenantId"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FeatureDto.fromJS(item));
            }
            this.price = data["price"] !== undefined ? data["price"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): FeaturesForTenant {
        return new FeaturesForTenant(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJS());
        }
        data["price"] = this.price !== undefined ? this.price : null;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FeaturesForTenant(JSON.parse(json));
    }
}

export class FeatureDto { 
    name: string; 
    displayName: string; 
    selected: boolean; 
    defaultValue: string; 
    editionId: number; 
    inputType: IInputType; 
    childFeatures: FeatureDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.selected = data["selected"] !== undefined ? data["selected"] : null;
            this.defaultValue = data["defaultValue"] !== undefined ? data["defaultValue"] : null;
            this.editionId = data["editionId"] !== undefined ? data["editionId"] : null;
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : null;
            if (data["childFeatures"] && data["childFeatures"].constructor === Array) {
                this.childFeatures = [];
                for (let item of data["childFeatures"])
                    this.childFeatures.push(FeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FeatureDto {
        return new FeatureDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["selected"] = this.selected !== undefined ? this.selected : null;
        data["defaultValue"] = this.defaultValue !== undefined ? this.defaultValue : null;
        data["editionId"] = this.editionId !== undefined ? this.editionId : null;
        data["inputType"] = this.inputType ? this.inputType.toJS() : null;
        if (this.childFeatures && this.childFeatures.constructor === Array) {
            data["childFeatures"] = [];
            for (let item of this.childFeatures)
                data["childFeatures"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new FeatureDto(JSON.parse(json));
    }
}

export class IInputType { 
    name: string; 
    attributes: { [key: string] : any; }; 
    validator: IValueValidator;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : null;
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : null;
        }
    }

    static fromJS(data: any): IInputType {
        return new IInputType(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : null;
            }
        }
        data["validator"] = this.validator ? this.validator.toJS() : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IInputType(JSON.parse(json));
    }
}

export class IValueValidator { 
    name: string; 
    attributes: { [key: string] : any; };
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key] !== undefined ? data["attributes"][key] : null;
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        return new IValueValidator(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key] !== undefined ? this.attributes[key] : null;
            }
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new IValueValidator(JSON.parse(json));
    }
}

export class TenantsOutput { 
    tenants: TenantListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["tenants"] && data["tenants"].constructor === Array) {
                this.tenants = [];
                for (let item of data["tenants"])
                    this.tenants.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TenantsOutput {
        return new TenantsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.tenants && this.tenants.constructor === Array) {
            data["tenants"] = [];
            for (let item of this.tenants)
                data["tenants"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantsOutput(JSON.parse(json));
    }
}

export class TenantListDto { 
    tenancyName: string; 
    name: string; 
    isDeleted: boolean; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): TenantListDto {
        return new TenantListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new TenantListDto(JSON.parse(json));
    }
}

export class EditTenantInput { 
    tenancyName: string; 
    name: string; 
    adminEmailAddress: string; 
    connectionString: string; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.tenancyName = data["tenancyName"] !== undefined ? data["tenancyName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.adminEmailAddress = data["adminEmailAddress"] !== undefined ? data["adminEmailAddress"] : null;
            this.connectionString = data["connectionString"] !== undefined ? data["connectionString"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EditTenantInput {
        return new EditTenantInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditTenantInput(JSON.parse(json));
    }
}

export class AuthenticateModel { 
    userNameOrEmailAddress: string; 
    password: string; 
    rememberClient: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"] !== undefined ? data["userNameOrEmailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.rememberClient = data["rememberClient"] !== undefined ? data["rememberClient"] : null;
        }
    }

    static fromJS(data: any): AuthenticateModel {
        return new AuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateModel(JSON.parse(json));
    }
}

export class AuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        return new AuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new AuthenticateResultModel(JSON.parse(json));
    }
}

export class ExternalLoginProviderInfoModel { 
    name: string; 
    clientId: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.clientId = data["clientId"] !== undefined ? data["clientId"] : null;
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        return new ExternalLoginProviderInfoModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalLoginProviderInfoModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateModel { 
    authProvider: string; 
    providerKey: string; 
    providerAccessCode: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.authProvider = data["authProvider"] !== undefined ? data["authProvider"] : null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : null;
            this.providerAccessCode = data["providerAccessCode"] !== undefined ? data["providerAccessCode"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        return new ExternalAuthenticateModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateModel(JSON.parse(json));
    }
}

export class ExternalAuthenticateResultModel { 
    accessToken: string; 
    encryptedAccessToken: string; 
    expireInSeconds: number; 
    waitingForActivation: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.accessToken = data["accessToken"] !== undefined ? data["accessToken"] : null;
            this.encryptedAccessToken = data["encryptedAccessToken"] !== undefined ? data["encryptedAccessToken"] : null;
            this.expireInSeconds = data["expireInSeconds"] !== undefined ? data["expireInSeconds"] : null;
            this.waitingForActivation = data["waitingForActivation"] !== undefined ? data["waitingForActivation"] : null;
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        return new ExternalAuthenticateResultModel(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ExternalAuthenticateResultModel(JSON.parse(json));
    }
}

export class ProhibitPermissionInput { 
    userId: number; 
    permissionName: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.permissionName = data["permissionName"] !== undefined ? data["permissionName"] : null;
        }
    }

    static fromJS(data: any): ProhibitPermissionInput {
        return new ProhibitPermissionInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["permissionName"] = this.permissionName !== undefined ? this.permissionName : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ProhibitPermissionInput(JSON.parse(json));
    }
}

export class UsersOutput { 
    searchString: string; 
    page: number; 
    rows: number; 
    remainingPages: number; 
    users: UserListDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.searchString = data["searchString"] !== undefined ? data["searchString"] : null;
            this.page = data["page"] !== undefined ? data["page"] : null;
            this.rows = data["rows"] !== undefined ? data["rows"] : null;
            this.remainingPages = data["remainingPages"] !== undefined ? data["remainingPages"] : null;
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [];
                for (let item of data["users"])
                    this.users.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UsersOutput {
        return new UsersOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["searchString"] = this.searchString !== undefined ? this.searchString : null;
        data["page"] = this.page !== undefined ? this.page : null;
        data["rows"] = this.rows !== undefined ? this.rows : null;
        data["remainingPages"] = this.remainingPages !== undefined ? this.remainingPages : null;
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UsersOutput(JSON.parse(json));
    }
}

export class UserListDto { 
    name: string; 
    surname: string; 
    userName: string; 
    fullName: string; 
    emailAddress: string; 
    isEmailConfirmed: boolean; 
    lastLoginTime: moment.Moment; 
    isActive: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UserListDto {
        return new UserListDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserListDto(JSON.parse(json));
    }
}

export class CreateUserInput { 
    userName: string; 
    name: string; 
    surname: string; 
    emailAddress: string; 
    password: string; 
    isActive: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
        }
    }

    static fromJS(data: any): CreateUserInput {
        return new CreateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CreateUserInput(JSON.parse(json));
    }
}

export class EditProfileInput { 
    myRoles: string[]; 
    name: string; 
    surname: string; 
    userName: string; 
    fullName: string; 
    emailAddress: string; 
    isEmailConfirmed: boolean; 
    lastLoginTime: moment.Moment; 
    isActive: boolean; 
    creationTime: moment.Moment; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["myRoles"] && data["myRoles"].constructor === Array) {
                this.myRoles = [];
                for (let item of data["myRoles"])
                    this.myRoles.push(item);
            }
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.fullName = data["fullName"] !== undefined ? data["fullName"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isEmailConfirmed = data["isEmailConfirmed"] !== undefined ? data["isEmailConfirmed"] : null;
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): EditProfileInput {
        return new EditProfileInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.myRoles && this.myRoles.constructor === Array) {
            data["myRoles"] = [];
            for (let item of this.myRoles)
                data["myRoles"].push(item);
        }
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new EditProfileInput(JSON.parse(json));
    }
}

export class UpdateUserInput { 
    userName: string; 
    name: string; 
    surname: string; 
    emailAddress: string; 
    isActive: boolean; 
    isDeleted: boolean; 
    deleterUserId: number; 
    deletionTime: moment.Moment; 
    lastModificationTime: moment.Moment; 
    lastModifierUserId: number; 
    creationTime: moment.Moment; 
    creatorUserId: number; 
    id: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.surname = data["surname"] !== undefined ? data["surname"] : null;
            this.emailAddress = data["emailAddress"] !== undefined ? data["emailAddress"] : null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
            this.isDeleted = data["isDeleted"] !== undefined ? data["isDeleted"] : null;
            this.deleterUserId = data["deleterUserId"] !== undefined ? data["deleterUserId"] : null;
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : null;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : null;
            this.lastModifierUserId = data["lastModifierUserId"] !== undefined ? data["lastModifierUserId"] : null;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : null;
            this.creatorUserId = data["creatorUserId"] !== undefined ? data["creatorUserId"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    static fromJS(data: any): UpdateUserInput {
        return new UpdateUserInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["surname"] = this.surname !== undefined ? this.surname : null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UpdateUserInput(JSON.parse(json));
    }
}

export class UserRoleSelectorOutput { 
    userId: number; 
    roles: UserSelectRoleDto[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserSelectRoleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRoleSelectorOutput {
        return new UserRoleSelectorOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserRoleSelectorOutput(JSON.parse(json));
    }
}

export class UserSelectRoleDto { 
    name: string; 
    displayName: string; 
    isSelected: boolean; 
    isStatic: boolean;
    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.isSelected = data["isSelected"] !== undefined ? data["isSelected"] : null;
            this.isStatic = data["isStatic"] !== undefined ? data["isStatic"] : null;
        }
    }

    static fromJS(data: any): UserSelectRoleDto {
        return new UserSelectRoleDto(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserSelectRoleDto(JSON.parse(json));
    }
}

export class SetUserRolesInput { 
    roles: string[]; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(item);
            }
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): SetUserRolesInput {
        return new SetUserRolesInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetUserRolesInput(JSON.parse(json));
    }
}

export class ChangePasswordInput { 
    currentPassword: string; 
    newPassword: string; 
    newPasswordConfirmation: string; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            this.currentPassword = data["currentPassword"] !== undefined ? data["currentPassword"] : null;
            this.newPassword = data["newPassword"] !== undefined ? data["newPassword"] : null;
            this.newPasswordConfirmation = data["newPasswordConfirmation"] !== undefined ? data["newPasswordConfirmation"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        return new ChangePasswordInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : null;
        data["newPasswordConfirmation"] = this.newPasswordConfirmation !== undefined ? this.newPasswordConfirmation : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new ChangePasswordInput(JSON.parse(json));
    }
}

export class CurrentUserPermissionsOutput { 
    userId: number; 
    assignedPermissions: UserAssignedPermission[];
    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            if (data["assignedPermissions"] && data["assignedPermissions"].constructor === Array) {
                this.assignedPermissions = [];
                for (let item of data["assignedPermissions"])
                    this.assignedPermissions.push(UserAssignedPermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurrentUserPermissionsOutput {
        return new CurrentUserPermissionsOutput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        if (this.assignedPermissions && this.assignedPermissions.constructor === Array) {
            data["assignedPermissions"] = [];
            for (let item of this.assignedPermissions)
                data["assignedPermissions"].push(item.toJS());
        }
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new CurrentUserPermissionsOutput(JSON.parse(json));
    }
}

export class UserAssignedPermission { 
    displayName: string; 
    name: string; 
    granted: boolean; 
    childPermissions: UserAssignedPermission[]; 
    parentPermission: string;
    constructor(data?: any) {
        if (data !== undefined) {
            this.displayName = data["displayName"] !== undefined ? data["displayName"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.granted = data["granted"] !== undefined ? data["granted"] : null;
            if (data["childPermissions"] && data["childPermissions"].constructor === Array) {
                this.childPermissions = [];
                for (let item of data["childPermissions"])
                    this.childPermissions.push(UserAssignedPermission.fromJS(item));
            }
            this.parentPermission = data["parentPermission"] !== undefined ? data["parentPermission"] : null;
        }
    }

    static fromJS(data: any): UserAssignedPermission {
        return new UserAssignedPermission(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["name"] = this.name !== undefined ? this.name : null;
        data["granted"] = this.granted !== undefined ? this.granted : null;
        if (this.childPermissions && this.childPermissions.constructor === Array) {
            data["childPermissions"] = [];
            for (let item of this.childPermissions)
                data["childPermissions"].push(item.toJS());
        }
        data["parentPermission"] = this.parentPermission !== undefined ? this.parentPermission : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new UserAssignedPermission(JSON.parse(json));
    }
}

export class SetUserSpecialPermissionsInput { 
    assignedPermissions: UserAssignedPermission[]; 
    userId: number;
    constructor(data?: any) {
        if (data !== undefined) {
            if (data["assignedPermissions"] && data["assignedPermissions"].constructor === Array) {
                this.assignedPermissions = [];
                for (let item of data["assignedPermissions"])
                    this.assignedPermissions.push(UserAssignedPermission.fromJS(item));
            }
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    static fromJS(data: any): SetUserSpecialPermissionsInput {
        return new SetUserSpecialPermissionsInput(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        if (this.assignedPermissions && this.assignedPermissions.constructor === Array) {
            data["assignedPermissions"] = [];
            for (let item of this.assignedPermissions)
                data["assignedPermissions"].push(item.toJS());
        }
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new SetUserSpecialPermissionsInput(JSON.parse(json));
    }
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result?: any; 

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}